/**
 * Real GitHub Integration Test - Live LLM + GitHub + Code Generation
 * 
 * This test performs end-to-end integration with:
 * - Real LLM (OpenAI/Anthropic/etc.)
 * - Real GitHub API (creates actual repository)
 * - Enhanced Code Agent with all phases
 * - Real Node.js server generation and testing
 * 
 * IMPORTANT: This test creates real GitHub repositories and uses real APIs.
 * Make sure you have:
 * - GITHUB_PAT environment variable set
 * - LLM API keys configured
 * - AgentResults organization access
 */

import { describe, test, expect, beforeAll, afterAll } from '@jest/globals';
import { EnhancedCodeAgent } from '../../src/agent/EnhancedCodeAgent.js';
import { ResourceManager } from '@legion/tools-registry';
import { promises as fs } from 'fs';
import { spawn } from 'child_process';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

describe('Real GitHub Integration Test', () => {
  let testProjectDir;
  let enhancedAgent;
  let repositoryInfo;
  let testRepoName;
  let resourceManager;
  
  beforeAll(async () => {
    // Initialize ResourceManager to access environment variables
    resourceManager = ResourceManager.getInstance();
    await resourceManager.initialize();
    
    // Try to get GitHub PAT from ResourceManager (it uses .env)
    let githubPat;
    try {
      githubPat = resourceManager.GITHUB_PAT;
    } catch (error) {
      // If not in ResourceManager, check if we have it in environment
      githubPat = process.env.GITHUB_PAT;
    }
    
    if (!githubPat) {
      console.log('‚ö†Ô∏è  Skipping GitHub integration test - no GITHUB_PAT available');
      return;
    }
    
    // Set it in process.env for CodeAgent to use
    process.env.GITHUB_PAT = githubPat;
    
    // Also try to get LLM API keys
    try {
      const openaiKey = resourceManager.OPENAI_API_KEY;
      if (openaiKey) process.env.OPENAI_API_KEY = openaiKey;
    } catch {}
    
    try {
      const anthropicKey = resourceManager.ANTHROPIC_API_KEY;
      if (anthropicKey) process.env.ANTHROPIC_API_KEY = anthropicKey;
    } catch {}
    
    // Create unique test repository name
    const timestamp = Date.now();
    testRepoName = `test-node-server-${timestamp}`;
    
    // Create temporary project directory
    testProjectDir = join(__dirname, '../../tmp', testRepoName);
    await fs.mkdir(testProjectDir, { recursive: true });
    
    console.log(`üß™ Setting up integration test in: ${testProjectDir}`);
    console.log(`üìù Repository name: ${testRepoName}`);
  }, 30000);
  
  afterAll(async () => {
    // Cleanup temporary directory
    if (testProjectDir) {
      try {
        await fs.rmdir(testProjectDir, { recursive: true });
      } catch (error) {
        console.warn('Cleanup error (ignored):', error.message);
      }
    }
    
    // Cleanup enhanced agent
    if (enhancedAgent) {
      try {
        await enhancedAgent.cleanup();
      } catch (error) {
        console.warn('Agent cleanup error (ignored):', error.message);
      }
    }
  }, 30000);
  
  test('should create GitHub repository using enhanced agent', async () => {
    if (!process.env.GITHUB_PAT) {
      console.log('‚ö†Ô∏è  Skipping test - no GITHUB_PAT');
      return;
    }
    
    console.log('üîç Debug: Environment variables:');
    console.log('  GITHUB_PAT:', process.env.GITHUB_PAT ? 'Set' : 'Not set');
    console.log('  OPENAI_API_KEY:', process.env.OPENAI_API_KEY ? 'Set' : 'Not set');
    console.log('  ANTHROPIC_API_KEY:', process.env.ANTHROPIC_API_KEY ? 'Set' : 'Not set');
    
    // Initialize enhanced code agent with Git integration
    enhancedAgent = new EnhancedCodeAgent({
      resourceManager, // Pass ResourceManager for environment access
      enableGitIntegration: true,
      gitConfig: {
        enabled: true,
        autoCommit: true,
        commitStrategy: 'phase',
        organization: 'AgentResults',
        createRepository: true,
        repositoryName: testRepoName,
        repositoryDescription: `Test Node.js server generated by AI agent - ${new Date().toISOString()}`,
        pushChanges: true
      },
      llmConfig: {
        provider: process.env.OPENAI_API_KEY ? 'openai' : 'anthropic',
        model: process.env.OPENAI_API_KEY ? 'gpt-4-turbo-preview' : 'claude-3-opus-20240229',
        temperature: 0.3,
        apiKey: process.env.OPENAI_API_KEY || process.env.ANTHROPIC_API_KEY
      },
      enhancedConfig: {
        enableRuntimeTesting: true,
        enableBrowserTesting: false, // Skip browser tests for speed
        enableLogAnalysis: true,
        enablePerformanceMonitoring: true
      }
    });
    
    // Initialize agent
    await enhancedAgent.initialize(testProjectDir, {
      llmConfig: {
        provider: process.env.OPENAI_API_KEY ? 'openai' : 'anthropic',
        model: process.env.OPENAI_API_KEY ? 'gpt-4-turbo-preview' : 'claude-3-opus-20240229',
        temperature: 0.3,
        apiKey: process.env.OPENAI_API_KEY || process.env.ANTHROPIC_API_KEY
      },
      runtimeConfig: {
        nodeRunner: { workingDirectory: testProjectDir },
        logManager: { enableRealTimeLogs: true },
        integration: { enableGitHooks: true }
      }
    });
    
    expect(enhancedAgent.initialized).toBe(true);
    expect(enhancedAgent.gitIntegration).toBeDefined();
    
    console.log('‚úÖ Enhanced Code Agent initialized with Git integration');
  }, 60000);
  
  test('should generate Node.js server with HTML page', async () => {
    if (!process.env.GITHUB_PAT || !enhancedAgent) {
      console.log('‚ö†Ô∏è  Skipping test - dependencies not available');
      return;
    }
    
    // Define requirements for a simple Node.js server
    const requirements = {
      type: 'backend',
      name: testRepoName,
      description: 'Simple Node.js server that renders HTML pages',
      features: [
        'Express.js web server',
        'Static file serving',
        'Homepage with basic HTML/CSS',
        'About page with server information',
        'Health check endpoint',
        'Environment-based configuration',
        'Comprehensive logging',
        'Error handling middleware'
      ],
      architecture: {
        backend: true,
        frontend: false,
        database: false
      },
      requirements: {
        'Create a Node.js Express server': {
          port: 'configurable via PORT environment variable (default 3000)',
          routes: [
            'GET / - Homepage with welcome message and navigation',
            'GET /about - About page with server information',
            'GET /health - Health check endpoint returning JSON status'
          ],
          middleware: [
            'Static file serving from public directory',
            'JSON body parsing',
            'Request logging',
            'Error handling'
          ]
        },
        'Create HTML pages': {
          homepage: 'Welcome page with CSS styling and navigation menu',
          about: 'About page showing server uptime and Node.js version',
          styling: 'Clean, responsive CSS with modern design'
        },
        'Add package.json': {
          scripts: {
            start: 'node server.js',
            dev: 'node server.js',
            test: 'jest'
          },
          dependencies: ['express'],
          devDependencies: ['jest', 'supertest']
        },
        'Create tests': {
          'server tests': 'Unit tests for all routes and middleware',
          'integration tests': 'End-to-end server testing'
        },
        'Add documentation': {
          README: 'Clear setup and usage instructions',
          'API documentation': 'Document all endpoints with examples'
        }
      }
    };
    
    console.log('üöÄ Starting enhanced development workflow...');
    
    // Run enhanced development workflow
    const summary = await enhancedAgent.develop(requirements);
    
    expect(summary).toBeDefined();
    expect(summary.success).toBe(true);
    expect(summary.files).toBeDefined();
    expect(summary.files.length).toBeGreaterThan(0);
    
    // Verify key files were created
    const expectedFiles = [
      'package.json',
      'server.js',
      'public/index.html',
      'public/about.html',
      'public/style.css',
      'README.md'
    ];
    
    for (const file of expectedFiles) {
      const filePath = join(testProjectDir, file);
      const exists = await fs.access(filePath).then(() => true).catch(() => false);
      expect(exists).toBe(true);
      console.log(`‚úÖ File created: ${file}`);
    }
    
    console.log('‚úÖ Node.js server generation completed');
    console.log(`üìä Generated ${summary.files.length} files`);
  }, 300000); // 5 minutes timeout for full development
  
  test('should verify generated code quality', async () => {
    if (!process.env.GITHUB_PAT || !enhancedAgent) {
      console.log('‚ö†Ô∏è  Skipping test - dependencies not available');
      return;
    }
    
    // Read and validate package.json
    const packageJsonPath = join(testProjectDir, 'package.json');
    const packageJson = JSON.parse(await fs.readFile(packageJsonPath, 'utf-8'));
    
    expect(packageJson.name).toBe(testRepoName);
    expect(packageJson.scripts.start).toBeDefined();
    expect(packageJson.dependencies.express).toBeDefined();
    expect(packageJson.devDependencies.jest).toBeDefined();
    
    // Read and validate server.js
    const serverPath = join(testProjectDir, 'server.js');
    const serverCode = await fs.readFile(serverPath, 'utf-8');
    
    expect(serverCode).toContain('express');
    expect(serverCode).toContain('app.get(\'/\'');
    expect(serverCode).toContain('app.get(\'/about\'');
    expect(serverCode).toContain('app.get(\'/health\'');
    expect(serverCode).toContain('process.env.PORT');
    
    // Read and validate HTML files
    const indexPath = join(testProjectDir, 'public/index.html');
    const aboutPath = join(testProjectDir, 'public/about.html');
    
    const indexHtml = await fs.readFile(indexPath, 'utf-8');
    const aboutHtml = await fs.readFile(aboutPath, 'utf-8');
    
    expect(indexHtml).toContain('<html');
    expect(indexHtml).toContain('<title>');
    expect(aboutHtml).toContain('<html');
    expect(aboutHtml).toContain('<title>');
    
    // Validate CSS exists and has content
    const stylePath = join(testProjectDir, 'public/style.css');
    const styleCSS = await fs.readFile(stylePath, 'utf-8');
    
    expect(styleCSS.length).toBeGreaterThan(100); // Should have meaningful CSS
    
    console.log('‚úÖ Generated code quality validation passed');
  }, 30000);
  
  test('should test generated server functionality', async () => {
    if (!process.env.GITHUB_PAT || !enhancedAgent) {
      console.log('‚ö†Ô∏è  Skipping test - dependencies not available');
      return;
    }
    
    // Install dependencies
    console.log('üì¶ Installing npm dependencies...');
    
    await new Promise((resolve, reject) => {
      const npmInstall = spawn('npm', ['install'], {
        cwd: testProjectDir,
        stdio: 'pipe'
      });
      
      npmInstall.on('close', (code) => {
        if (code === 0) {
          resolve();
        } else {
          reject(new Error(`npm install failed with code ${code}`));
        }
      });
      
      npmInstall.on('error', reject);
    });
    
    console.log('‚úÖ Dependencies installed');
    
    // Start server and test endpoints
    console.log('üöÄ Starting test server...');
    
    const server = spawn('node', ['server.js'], {
      cwd: testProjectDir,
      env: { ...process.env, PORT: '3001' },
      stdio: 'pipe'
    });
    
    // Wait for server to start
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    try {
      // Test health endpoint
      const healthResponse = await fetch('http://localhost:3001/health');
      expect(healthResponse.ok).toBe(true);
      
      const healthData = await healthResponse.json();
      expect(healthData.status).toBe('healthy');
      
      // Test homepage
      const homeResponse = await fetch('http://localhost:3001/');
      expect(homeResponse.ok).toBe(true);
      expect(homeResponse.headers.get('content-type')).toContain('text/html');
      
      // Test about page
      const aboutResponse = await fetch('http://localhost:3001/about');
      expect(aboutResponse.ok).toBe(true);
      expect(aboutResponse.headers.get('content-type')).toContain('text/html');
      
      console.log('‚úÖ Server functionality tests passed');
      
    } finally {
      // Stop server
      server.kill('SIGTERM');
      
      // Wait for graceful shutdown
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }, 60000);
  
  test('should verify GitHub repository was created', async () => {
    if (!process.env.GITHUB_PAT || !enhancedAgent || !enhancedAgent.gitIntegration) {
      console.log('‚ö†Ô∏è  Skipping test - dependencies not available');
      return;
    }
    
    // Get repository information
    repositoryInfo = await enhancedAgent.gitIntegration.getRepositoryStatus();
    
    expect(repositoryInfo).toBeDefined();
    
    // Verify we can access the GitHub repository
    const gitHubOps = enhancedAgent.gitIntegration.gitHubOperations;
    if (!gitHubOps) {
      console.log('GitHub operations not available, skipping repository verification');
      return;
    }
    const repoInfo = await gitHubOps.getRepositoryInfo('AgentResults', testRepoName);
    
    expect(repoInfo.name).toBe(testRepoName);
    expect(repoInfo.owner.login).toBe('AgentResults');
    expect(repoInfo.description).toContain('Test Node.js server');
    
    console.log(`‚úÖ GitHub repository created: ${repoInfo.html_url}`);
    console.log(`üìä Repository stats: ${repoInfo.size}KB, ${repoInfo.language || 'JavaScript'}`);
    
    repositoryInfo = repoInfo;
  }, 30000);
  
  test('should verify Git commits were made', async () => {
    if (!process.env.GITHUB_PAT || !enhancedAgent || !repositoryInfo) {
      console.log('‚ö†Ô∏è  Skipping test - dependencies not available');
      return;
    }
    
    // Get commit history
    const commitHistory = await enhancedAgent.gitIntegration.getCommitHistory();
    
    expect(commitHistory).toBeDefined();
    expect(commitHistory.length).toBeGreaterThan(0);
    
    // Verify phase-based commits
    const expectedPhases = ['planning', 'generation', 'testing', 'quality'];
    const commitMessages = commitHistory.map(c => c.message).filter(msg => msg);
    
    console.log(`Found ${commitMessages.length} commit messages`);
    
    if (commitMessages.length > 0) {
      for (const phase of expectedPhases) {
        const hasPhaseCommit = commitMessages.some(msg => 
          msg.toLowerCase().includes(phase) || 
          msg.toLowerCase().includes('phase')
        );
        expect(hasPhaseCommit).toBe(true);
      }
    }
    
    console.log(`‚úÖ Git integration verified: ${commitHistory.length} commits made`);
    console.log('üìù Recent commits:');
    commitHistory.slice(0, 3).forEach(commit => {
      console.log(`   - ${commit.message.split('\n')[0]}`);
    });
  }, 30000);
  
  test('should run generated tests', async () => {
    if (!process.env.GITHUB_PAT || !enhancedAgent) {
      console.log('‚ö†Ô∏è  Skipping test - dependencies not available');
      return;
    }
    
    // Run the generated tests
    console.log('üß™ Running generated test suite...');
    
    const testResult = await new Promise((resolve) => {
      const npmTest = spawn('npm', ['test'], {
        cwd: testProjectDir,
        stdio: 'pipe'
      });
      
      let output = '';
      npmTest.stdout.on('data', (data) => {
        output += data.toString();
      });
      
      npmTest.stderr.on('data', (data) => {
        output += data.toString();
      });
      
      npmTest.on('close', (code) => {
        resolve({
          exitCode: code,
          output: output
        });
      });
    });
    
    // Verify tests ran and passed
    expect(testResult.exitCode).toBe(0);
    expect(testResult.output).toContain('Tests:');
    expect(testResult.output).toMatch(/\d+ passed/);
    
    console.log('‚úÖ Generated tests passed successfully');
    console.log(`üìä Test output: ${testResult.output.split('\n').filter(line => line.includes('passed') || line.includes('failed')).join(', ')}`);
  }, 90000);
  
  test('should provide integration test summary', async () => {
    if (!process.env.GITHUB_PAT || !enhancedAgent || !repositoryInfo) {
      console.log('‚ö†Ô∏è  Skipping test - dependencies not available');
      return;
    }
    
    // Generate comprehensive summary
    const summary = {
      testName: 'Real GitHub Integration Test',
      success: true,
      timestamp: new Date().toISOString(),
      repository: {
        name: repositoryInfo.name,
        url: repositoryInfo.html_url,
        owner: repositoryInfo.owner.login,
        size: repositoryInfo.size
      },
      agent: {
        type: 'EnhancedCodeAgent',
        phases: ['planning', 'generation', 'testing', 'quality', 'enhanced_quality', 'comprehensive_testing'],
        gitIntegration: true,
        runtimeTesting: true
      },
      verification: {
        codeGenerated: true,
        serverWorks: true,
        testsPass: true,
        gitCommits: true,
        githubRepo: true
      },
      metrics: enhancedAgent.getMetricsSummary()
    };
    
    console.log('\nüéâ INTEGRATION TEST SUMMARY üéâ');
    console.log('=====================================');
    console.log(`‚úÖ Repository Created: ${summary.repository.url}`);
    console.log(`‚úÖ Code Generated: Node.js + Express server`);
    console.log(`‚úÖ Server Tested: All endpoints working`);
    console.log(`‚úÖ Tests Generated: Jest test suite passing`);
    console.log(`‚úÖ Git Integration: Phase-based commits`);
    console.log(`‚úÖ GitHub Push: Code uploaded to AgentResults org`);
    console.log(`‚è±Ô∏è  Total Time: ${summary.metrics.totalTime}ms`);
    console.log('=====================================\n');
    
    // Verify all components worked
    expect(summary.verification.codeGenerated).toBe(true);
    expect(summary.verification.serverWorks).toBe(true);
    expect(summary.verification.testsPass).toBe(true);
    expect(summary.verification.gitCommits).toBe(true);
    expect(summary.verification.githubRepo).toBe(true);
    
    // Store summary for reference
    await fs.writeFile(
      join(testProjectDir, 'integration-test-summary.json'),
      JSON.stringify(summary, null, 2)
    );
  }, 30000);
});