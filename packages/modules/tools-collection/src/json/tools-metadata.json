{
  "module": {
    "name": "json",
    "description": "JSON manipulation tools for parsing, stringifying, validating and extracting data",
    "version": "1.0.0", 
    "author": "Legion Team",
    "category": "data-processing"
  },
  "tools": {
    "json_parse": {
      "name": "json_parse",
      "description": "Parse JSON string into JavaScript object",
      "inputSchema": {
        "type": "object",
        "properties": {
          "json_string": {
            "type": "string",
            "description": "The JSON string to parse",
            "default": "{\"test\": true}"
          },
          "reviver": {
            "type": "string",
            "description": "Optional reviver function code (advanced use)"
          }
        },
        "required": ["json_string"]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "parsed": {
            "description": "The parsed JavaScript object"
          },
          "result": {
            "description": "The parsed JavaScript object (duplicate for compatibility)"
          },
          "success": {
            "type": "boolean",
            "description": "Whether parsing was successful"
          }
        },
        "required": ["parsed", "result", "success"]
      },
      "category": "data-processing",
      "tags": ["json", "parse", "data", "object"]
    },
    "json_stringify": {
      "name": "json_stringify",
      "description": "Convert JavaScript object to JSON string",
      "inputSchema": {
        "type": "object",
        "properties": {
          "object": {
            "description": "The JavaScript object to stringify"
          },
          "space": {
            "type": "number",
            "default": 2,
            "description": "Number of spaces for indentation (default: 2)"
          },
          "replacer": {
            "type": "string",
            "description": "Optional replacer function code (advanced use)"
          }
        },
        "required": ["object"]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "json_string": {
            "type": "string",
            "description": "The JSON string representation"
          },
          "success": {
            "type": "boolean",
            "description": "Whether stringifying was successful"
          }
        },
        "required": ["json_string", "success"]
      },
      "category": "data-processing", 
      "tags": ["json", "stringify", "data", "string"]
    },
    "json_validate": {
      "name": "json_validate",
      "description": "Validate JSON string format and structure",
      "inputSchema": {
        "type": "object",
        "properties": {
          "json_string": {
            "type": "string",
            "description": "The JSON string to validate"
          },
          "strict": {
            "type": "boolean",
            "default": false,
            "description": "Whether to use strict validation mode"
          }
        },
        "required": ["json_string"]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "Whether the JSON is valid"
          },
          "errors": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Array of validation error messages"
          },
          "parsed": {
            "description": "The parsed object (if valid)"
          }
        },
        "required": ["valid", "errors"]
      },
      "category": "validation",
      "tags": ["json", "validate", "data", "validation"]
    },
    "json_extract": {
      "name": "json_extract",
      "description": "Extract specific values from JSON using JSONPath or dot notation",
      "inputSchema": {
        "type": "object",
        "properties": {
          "json_data": {
            "description": "The JSON object or string to extract from"
          },
          "path": {
            "type": "string",
            "description": "JSONPath or dot notation path (e.g., '$.user.name' or 'user.name')"
          },
          "default_value": {
            "description": "Default value to return if path not found"
          }
        },
        "required": ["json_data", "path"]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "extracted": {
            "description": "The extracted value"
          },
          "found": {
            "type": "boolean",
            "description": "Whether the path was found"
          },
          "path": {
            "type": "string",
            "description": "The path that was used"
          }
        },
        "required": ["extracted", "found", "path"]
      },
      "category": "data-processing",
      "tags": ["json", "extract", "jsonpath", "data"]
    }
  }
}