import { ConfigurableAgent } from '@legion/configurable-agent';
import { ResourceManager } from '@legion/resource-manager';
import { ConversationManager } from '../conversation/ConversationManager.js';
import { GeminiPromptManager } from '../prompts/GeminiPromptManager.js';

export class GeminiCompatibleAgent extends ConfigurableAgent {
  constructor(config = {}) {
    super(config);
    this.conversationManager = null;
    this.promptManager = null;
  }

  async initialize() {
    const resourceManager = await ResourceManager.getInstance();
    this.promptManager = new GeminiPromptManager(resourceManager);
    this.conversationManager = new ConversationManager({
      promptManager: this.promptManager,
      resourceManager
    });

    await super.initialize();
  }

  async processMessage(userInput) {
    const response = await this.conversationManager.handleUserInput(userInput);
    return this.streamResponse(response);
  }

  async streamResponse(response) {
    // Implement streaming response handling
    return response;
  }

  async executeTools(toolRequests) {
    // Implement tool execution with proper permissions
    return await super.executeTools(toolRequests);
  }

  async compressContext() {
    return await this.conversationManager.compressHistory();
  }
}
