export class GeminiPromptManager {
  constructor(resourceManager) {
    this.resourceManager = resourceManager;
  }

  async buildSystemPrompt(userMemory = null) {
    const directoryContext = await this.getDirectoryContext();
    const environmentContext = await this.getEnvironmentContext();
    const toolDescriptions = await this.buildToolDescriptions();
    const memorySection = userMemory ? `\n\nUser Memory:\n${userMemory}` : '';

    return `You are Gemini, a helpful AI coding assistant that helps with software engineering tasks.

${directoryContext}
${environmentContext}
${toolDescriptions}${memorySection}`;
  }

  async getDirectoryContext() {
    return await this.resourceManager.getDirectoryContext();
  }

  async getEnvironmentContext() {
    return await this.resourceManager.getEnvironmentContext();
  }

  async buildToolDescriptions() {
    const tools = await this.resourceManager.getAvailableTools();
    return tools.map(tool => 
      `${tool.name}: ${tool.description}`
    ).join('\n');
  }

  async buildCompressionPrompt() {
    return `Please summarize the following conversation while preserving key context about files, code changes, and important decisions:`;
  }
}
