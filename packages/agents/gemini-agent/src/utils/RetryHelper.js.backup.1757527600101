/**
 * Provides retry functionality with exponential backoff
 */
class RetryHelper {
  constructor(maxAttempts = 3, initialDelay = 1000) {
    this.maxAttempts = maxAttempts;
    this.initialDelay = initialDelay;
  }

  async retry(operation) {
    let lastError;
    for (let attempt = 1; attempt <= this.maxAttempts; attempt++) {
      try {
        return await operation();
      } catch (error) {
        lastError = error;
        if (attempt === this.maxAttempts) break;
        
        const delay = this.initialDelay * Math.pow(2, attempt - 1);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
    throw lastError;
  }
}

export default RetryHelper;
