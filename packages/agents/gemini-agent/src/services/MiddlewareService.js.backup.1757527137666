/**
 * Middleware Service for handling Express middleware operations
 */
/**
 * Service for managing Express middleware
 */
export class MiddlewareService {
  constructor() {
    this.middlewares = new Map();
    this.applied = new Set();
  }

  /**
   * Register a new middleware function
   * @param {string} name - Unique identifier for the middleware
   * @param {Function} middleware - Express middleware function
   * @throws {Error} If middleware is invalid or name already exists
   */
  registerMiddleware(name, middleware) {
    if (typeof name !== 'string' || !name.trim()) {
      throw new Error('Middleware name must be a non-empty string');
    }
    if (typeof middleware !== 'function') {
      throw new Error('Middleware must be a function');
    }
    if (this.middlewares.has(name)) {
      throw new Error(`Middleware '${name}' already registered`);
    }
    this.middlewares.set(name, middleware);
  }

  /**
   * Retrieve registered middleware by name
   * @param {string} name - Middleware identifier
   * @returns {Function} Express middleware function
   * @throws {Error} If middleware not found
   */
  getMiddleware(name) {
    if (!this.middlewares.has(name)) {
      throw new Error(`Middleware '${name}' not found`);
    }
    return this.middlewares.get(name);
  }

  /**
   * Apply middleware to Express app
   * @param {object} app - Express application instance
   * @param {string} name - Middleware identifier
   * @throws {Error} If app is invalid or middleware already applied
   */
  applyMiddleware(app, name) {
    if (!app || typeof app.use !== 'function') {
      throw new Error('Invalid Express application instance');
    }
    if (this.applied.has(name)) {
      throw new Error(`Middleware '${name}' already applied`);
    }
    const middleware = this.getMiddleware(name);
    app.use(middleware);
    this.applied.add(name);
  }

  /**
   * Check if middleware is applied
   * @param {string} name - Middleware identifier
   * @returns {boolean} True if middleware is applied
   */
  isApplied(name) {
    return this.applied.has(name);
  }

  /**
   * Remove registered middleware
   * @param {string} name - Middleware identifier
   * @throws {Error} If middleware not found
   */
  removeMiddleware(name) {
    if (!this.middlewares.has(name)) {
      throw new Error(`Middleware '${name}' not found`);
    }
    this.middlewares.delete(name);
    this.applied.delete(name);
  }
}
