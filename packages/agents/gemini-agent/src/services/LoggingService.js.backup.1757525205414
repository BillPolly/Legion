/**
 * Service for centralized logging functionality
 */
export class LoggingService {
  constructor(options = {}) {
    this.level = options.level || 'info';
    this.levels = ['error', 'warn', 'info', 'debug'];
    this.history = [];
  }

  log(level, message, meta = {}) {
    if (this.shouldLog(level)) {
      const logEntry = {
        timestamp: new Date().toISOString(),
        level,
        message,
        meta
      };
      this.history.push(logEntry);
      console[level](message, meta);
    }
  }

  shouldLog(level) {
    return this.levels.indexOf(level) <= this.levels.indexOf(this.level);
  }

  error(message, meta) { this.log('error', message, meta); }
  warn(message, meta) { this.log('warn', message, meta); }
  info(message, meta) { this.log('info', message, meta); }
  debug(message, meta) { this.log('debug', message, meta); }

  getHistory() {
    return this.history;
  }
}
