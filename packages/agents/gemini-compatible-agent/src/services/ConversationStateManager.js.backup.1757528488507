export class ConversationStateManager {
  constructor() {
    this.conversations = new Map();
  }

  createConversation(id) {
    const conversation = {
      id,
      created: new Date().toISOString(),
      turns: [],
      context: {
        workingDirectory: process.cwd(),
        recentFiles: [],
        environment: {}
      }
    };
    this.conversations.set(id, conversation);
    return conversation;
  }

  getConversation(id) {
    return this.conversations.get(id);
  }

  addTurn(conversationId, turn) {
    const conversation = this.getConversation(conversationId);
    if (!conversation) return null;

    conversation.turns.push({
      ...turn,
      timestamp: new Date().toISOString()
    });
    return conversation;
  }

  updateContext(conversationId, context) {
    const conversation = this.getConversation(conversationId);
    if (!conversation) return null;

    conversation.context = {
      ...conversation.context,
      ...context
    };
    return conversation;
  }

  getRecentContext(conversationId, turnLimit = 10) {
    const conversation = this.getConversation(conversationId);
    if (!conversation) return null;

    return {
      recentTurns: conversation.turns.slice(-turnLimit),
      context: conversation.context
    };
  }
}
